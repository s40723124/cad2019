<h1>About</h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h1>Develop</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>
<h1>每週練習內容</h1>
<p></p>
<h2>week1</h2>
<p>中秋節吃烤肉</p>
<p></p>
<h2>week2</h2>
<p>亂數分組</p>
<p><a href="http://mde.tw/cad2019/content/%E5%88%86%E7%B5%84%E5%90%8D%E5%96%AE.html">http://mde.tw/cad2019/content/%E5%88%86%E7%B5%84%E5%90%8D%E5%96%AE.html</a></p>
<p>第五組</p>
<p>40723101</p>
<p>40723103</p>
<p>40723107</p>
<p>40723114</p>
<p>40723119</p>
<p>40723122</p>
<p>40723124</p>
<p>40723125</p>
<p>40723152</p>
<p>40723155</p>
<p>40623113</p>
<p>40623252</p>
<p></p>
<h2>week3</h2>
<p>編譯solvespace<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/rMD09TUDeVE" width="560"></iframe></p>
<h2>week5</h2>
<p>編譯solvespace<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/iMCoNyrWWy8" width="560"></iframe></p>
<h2>week6</h2>
<p>雙輪車控制模擬<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/r1C6YBVpkxU" width="560"></iframe></p>
<p></p>
<h2>week7</h2>
<p>小組統一規格</p>
<p><img alt="" height="168" src="/images/Annotation 2019-11-01 103841.png" width="202"/></p><h2>week8</h2>
<p><a href="https://s40723124.github.io/cad2019/blog/index.html">https://s40723124.github.io/cad2019/blog/index.html</a></p>
<p><img alt="" height="219" src="/images/Annotation 2019-11-08 105909.png" width="390"/></p>
<h2>week9</h2>
<p>期中考 報告及影片</p>
<p><a href="https://www.youtube.com/watch?v=VbNoAApa8Ic&amp;t=4s">https://www.youtube.com/watch?v=VbNoAApa8Ic&amp;t=4s</a></p><h2>week15</h2>
<p>心得:一個人翻譯<a href="http://mde.tw/cad2019/downloads/UG-NX3-Tutorial.pdf">http://mde.tw/cad2019/downloads/UG-NX3-Tutorial.pdf</a>這本原文書雖然真的很累，但不只可以增進自己的英文字彙量，還可以在翻譯的過程中得到有關<span>NX的基本操作與指令的了解。雖然會的都只是基本的操作，但我相信只要我持續翻譯完這本原文書，並且一步一步的跟著原文書上的做，一定可以讓我在這門課程中學習到更多的東西。<img alt="" height="443" src="/images/nx翻譯.png" width="791"/></span></p>
<p><br/><br/><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/1YW1aHTTZ0I" width="560"></iframe></p>
<p></p>
<h2>week16</h2>
<p>小考</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/vn6i09zeorY" width="560"></iframe></p><h2>week17</h2>
<p>影片網址:<a href="https://www.youtube.com/watch?v=3pob4r-935s">https://www.youtube.com/watch?v=3pob4r-935s</a></p>
<p>原文網址:<a href="http://www.coppeliarobotics.com/helpFiles/en/buildingAModelTutorial.htm">http://www.coppeliarobotics.com/helpFiles/en/buildingAModelTutorial.htm</a></p>
<p>原文書翻譯</p>
<p>Building the visible shapes</p>
<p>When building a new model, first, we handle only the visual aspect of it: the dynamic aspect (its undelying even more simplified/optimized model), joints, sensors, etc. will be handled at a later stage.</p>
<p> </p>
<p>We could now directly create primitive shapes in CoppeliaSim with [Menu bar --&gt; Add --&gt; Primitive shape --&gt; ...]. When doing this, we have the option to create pure shapes, or regular shapes. Pure shape will be optimized for dynamic interaction, and also directly be dynamically enabled (i.e. fall, collide, but this can be disabled at a later stage). Primitive shapes will be simple meshes, which might not contain enough details or geometric accuracy for our application. Our other option in that case would be to import a mesh from an external application.</p>
<p> </p>
<p>When importing CAD data from an external application, the most important is to make sure that the CAD model is not too heavy, i.e. doesn't contain too many triangles. This requirement is important since a heavy model will be slow in display, and also slow down various calculation modules that might be used at a later stage (e.g. minimum distance calculation, or dynamics). Following example is typically a no-go (even if, as we will see later, there are means to simplify the data within CoppeliaSim):</p>
<table>
<tbody>
<tr>
<td width="238">
<p>建立一個模型</p>
</td>
</tr>
</tbody>
</table>
<p>在構建新模型時，首先，我們先處理它的視覺方面；而動態方面（其簡化，優化模型的不合理之處）、關節及傳感器等將在以後階段進行處理。</p>
<p>現在，我們可以使用[菜單-&gt;添加-&gt;基本形狀-&gt; ...]在CoppeliaSim中直接創建基本形狀。. 在處理這個的時候, 我們創建形狀有分純形狀或正多邊形。純形狀會優化動力相互作用,也可以使它直接的動起來(即墜落、碰撞，但是可以在以後禁用)。原始形狀將會成為簡單的網格, 但對於我們的應用程序，可能沒有足夠的細節或幾何精度.。在這種情況下，我們的另一種選擇是從外部應用程序導入網格。</p>
<p>當層外部應用程式輸入CAD資料的時候, 最重要的是確認CAD的模型不會太大，即不要包含太多的三角形。這個需求非常的重要因為笨重的模型需要一段時間來顯示，也減緩了以後可能使用的各種計算模塊的速度 (例如最小距離計算或動態).。以下示例通常是不行的 (即使變成稍後看到的那樣，也還是有方法可以簡化CoppeliaSim中的數據):</p>
<p>Above CAD data is very heavy: it contains many triangles (more than 47'000), which would be ok if we would just use a single instance of it in an empty scene. But most of the time you will want to simulate several instances of a same robot, attach various types of grippers, and maybe have those robots interact with other robots, devices, or the environment. In that case, a simulation scene can quickly become too slow. Generally, we recommend to model a robot with no more than a total of 20'000 triangles, but most of the time 5'000-10'000 triangles would just do fine as well. Remember: less is better, in almost every aspect.</p>
<p> </p>
<p>What makes above model so heavy? First, models that contain holes and small details will require much more triangular faces for a correct representation. So, if possible, try to remove all the holes, screws, the inside of objects, etc. from your original model data. If you have the original model data represented as parametric surfaces/objects, then it is most of the time a simple matter of selecting the items and deleting them (e.g. in Solidworks). The second important step is to export the original data with a limited precision: most CAD applications let you specify the level of details of exported meshes. It might also be important to export the objects in several steps, when the drawing consists of large and small objects; this is to avoid having large objects too precisely defined (too many triangles) and small objects too roughly defined (too few triangles): simply export large objects first (by adjusting the desired precision settings), then small objects (by adjusting up precision settings).</p>
<p> </p>
<p>CoppeliaSim supports currently following CAD data formats: OBJ, STL, DXF, 3DS (Windows only), and Collada. URDF is also supported, but not mentionned here since it is not a pure mesh-based file format.</p>
<p> </p>
<p>Now suppose that we have applied all possible simplifications as described in previous section. We might still end-up with a too heavy mesh after import:</p>
<p>以上CAD數據非常繁重: 它包含了非常多的三角形 (超過47000個), 如果我們只在空的場景中使用它的單個實例，那沒關係。但是大多數時候，您將需要模擬同一機器人的多個實例，連接各種類型的夾爪，並可能使這些機器人與其他機器人，設備或環境進行交互。在這種情況下，模擬場景可能會變得太慢。</p>
<p>通常，我們建議對不超過2萬個三角形的機器人進行建模，在大多數情況下，5 000至10 000個三角形也可以。但記住：在幾乎所有方面，少即是好。</p>
<p>是什麼讓模型那麼複雜? 首先，包含孔和小細節的模型將需要更多的三角形面才能正確表示。因此，如果可以，請嘗試從原始模型數據中刪除所有的孔、螺釘以及物體的內部等。 如果您將原始模型數據表示為參數化曲面/對象，則通常在大多數情況下只需選擇並刪除它們即可（例如在Solidworks中）。第二個重要的步驟是以有限的精度導出原始數據：大多數CAD應用程序都允許您指定導出的網格的詳細程度。</p>
<p>當模型含有不同大小的物體時分幾步導出對象也可能很重要; 它的目的是避免太大的對象定義太精確（三角形太多）和太小的對象定義太粗（三角形太少）：只需先導出大對象（通過調整所需的精度設置），然後導出小對象（通過調整精度設置）即可。</p>
<p>CoppeliaSim當前支持以下CAD數據格式：OBJ，STL，DXF，3DS（僅Windows）和Collada。還支持URDF，但此處未提及，因為它不是基於純網格的文件格式。現在，就算我們已按照上一節中所述應用了所有可能的簡化，導入後，我們可能仍然留下一些過複雜的網格：</p>
<p></p>
<p>You can notice that the whole robot was imported as a single mesh. We will see later how to divide it appropriately. Notice also the wrong orientation of the imported mesh: best is to keep the orientation as it is, until the whole model was built, since, if at a later stage we want to import other items that are related to that same robot, they will automatically have the correct position/orientation relative to the original mesh.</p>
<p>At this stage, we have several functions at our disposal, to simplify the mesh:</p>
<ul>
<li><strong>Automatic mesh division:</strong>allows to generate a new shape for all elements that are not linked together via a common edge. This does not always work for the selected mesh, but is always worth a try, since working on mesh elements gives us more control than if we had to work on all elements at the same time. The function can be accessed with [Menu bar --&gt; Edit --&gt; Grouping/Merging --&gt; Divide selected shapes]. Sometimes, a mesh will be divided more than expected. In that case, simply merge elements that logically belong together (i.e. that will have the same visual attributes and that are part of the same link) back into one single shape ([Menu bar --&gt; Edit -&gt; Grouping/Merging --&gt; Merge selected shapes]).</li>
<li><strong>Extract the convex hull:</strong>allows to simplify the mesh by transforming it into a convex hull. The function can be accessed with [Menu bar --&gt; Edit --&gt; Morph selection into convex shapes].</li>
<li><strong>Decimate the mesh:</strong>allows to reduce the number of triangles contained in the mesh. The function can be accessed with [Menu bar --&gt; Edit --&gt; Decimate selected shape...].</li>
<li><strong>Remove the inside of the mesh:</strong>allows to simplify the mesh by removing its inside. This function is based on <a href="http://www.coppeliarobotics.com/helpFiles/en/visionSensors.htm">vision sensors</a> and might give more or less satisfying results depending on the selected settings. The function can be accessed with [Menu bar --&gt; Edit --&gt; Extract inside of selected shape].</li>
</ul>
<p>There is no predefined order in which above functions can/should be applied (except for the first item in the list, which should always be tried first), it heavily depends on the geometry of the mesh we are trying to simplify. Following image illustrates above functions applied to the imported mesh (let's suppose the first item in the list didn't work for us):</p>
<p></p>
<p>您會注意到整個機器人是作為單個網格導入的，稍後我們將看到如何對其進行適當劃分。還要注意導入的網格的方向錯誤：最好保持原來的方向，</p>
<p>直到構建完整個模型為止，因為如果以後要導入與同一機器人相關的其他項目，則它們將自動具有相對於原始網格的正確位置/方向。在此階段，我們可以使用多種功能來簡化網格：</p>
<p> </p>
<p> </p>
<p> </p>
<ul>
<li><strong>自動網格劃分：允許為未通過公共邊鏈接在一起的所有元素生成新形狀，這不總是適用於選定的網格，但是總是值得一試的，因為與必須同時處理所有元素相比，處理網格元素可以為我們提供更多的控制權。可以通過<span>[</span>菜單欄<span>-&gt;</span>編輯<span>-&gt;</span>分組<span>/</span>合併<span>-&gt;</span>分割所選形狀<span>]</span>訪問該功能。有時，網格劃分會超出預期。在這種情況下，只需將邏輯上屬於一起的元素（即具有相同的視覺屬性並且屬於同一鏈接的一部分）合併回一個單一形狀（<span>[</span>菜單<span>-&gt;</span>編輯<span>-&gt;</span>分組<span>/</span>合併<span>-&gt;</span>合併選定的形狀<span>]</span>）。</strong></li>
<li><strong>提取凸點：通過將其轉換為凸點來簡化網格。可以通過<span>[</span>菜單<span>-&gt;</span>編輯<span>-&gt;</span>將選擇變形為凸形<span>]</span>來訪問該功能。</strong></li>
<li><strong>抽取網格：減少網格中包含的三角形數量。可以通過<span>[</span>菜單<span>-&gt;</span>編輯<span>-&gt;</span>縮小所選形狀<span>...]</span>使用該功能。</strong></li>
<li><strong>刪除網格的內部：允許通過刪除其內部來簡化網格。此功能基於視覺傳感器，根據所選設置可能會或多或少地令人滿意。可以通過<span>[</span>菜單<span>-&gt;</span>編輯<span>-&gt;</span>提取選定形狀的內部<span>]</span>訪問該功能。</strong></li>
</ul>
<p>沒有/可以應用上述功能的預定義順序（列表中的第一項除外，應始終首先嘗試該項），它在很大程度上取決於我們要簡化的網格的幾何形狀。下圖說明了應用於導入的網格的上述功能（假設列表中的第一項對我們沒有作用）：</p>